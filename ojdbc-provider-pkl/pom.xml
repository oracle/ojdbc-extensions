<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <name>Oracle JDBC Providers Pkl Module</name>

  <artifactId>ojdbc-provider-pkl</artifactId>
  <packaging>jar</packaging>

  <parent>
    <groupId>com.oracle.database.jdbc</groupId>
    <artifactId>ojdbc-extensions</artifactId>
    <version>${extensions-version}</version>
  </parent>
  
  <properties>
    <pkl.version>0.27.0</pkl.version>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.oracle.database.jdbc</groupId>
      <artifactId>ojdbc8</artifactId>
    </dependency>
    <dependency>
      <groupId>org.pkl-lang</groupId>
      <artifactId>pkl-core</artifactId>
      <version>${pkl.version}</version>
    </dependency>
    <dependency>
      <groupId>org.pkl-lang</groupId>
      <artifactId>pkl-config-java</artifactId>
      <version>${pkl.version}</version>
    </dependency>
    <dependency>
      <groupId>org.pkl-lang</groupId>
      <artifactId>pkl-codegen-java</artifactId>
      <version>${pkl.version}</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <executions>
          <execution>
            <goals>
              <!--
                The test classes of this module are used by test classes of
                the sibling modules (OCI and Azure).
                Maven's jar plugin is configured to generate a test-jar. The
                sibling modules then declare a dependency on it.
                -->
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
<!--      <plugin>-->
<!--        &lt;!&ndash; Comment out this plugin for now. We only need to generate the Java class from pkl template only once. &ndash;&gt;-->
<!--        &lt;!&ndash; There are some changes being made manually in the generated Java class. For example, replacing        &ndash;&gt;-->
<!--        &lt;!&ndash; dots (.) in variable names with double dollar sign ($$), since dot is illegal in Java variable names. &ndash;&gt;-->
<!--        <groupId>org.codehaus.mojo</groupId>-->
<!--        <artifactId>exec-maven-plugin</artifactId>-->
<!--        <version>3.3.0</version>-->
<!--        <executions>-->
<!--          <execution>-->
<!--            <goals>-->
<!--              <goal>java</goal>-->
<!--            </goals>-->
<!--            <phase>initialize</phase>-->
<!--          </execution>-->
<!--        </executions>-->
<!--        <configuration>-->
<!--          <mainClass>org.pkl.codegen.java.Main</mainClass>-->
<!--          <arguments>-->
<!--            <argument>&#45;&#45;generate-javadoc</argument>-->
<!--            <argument>-w</argument>-->
<!--            <argument>${maven.multiModuleProjectDirectory}/ojdbc-provider-pkl</argument>-->
<!--            <argument>-o</argument>-->
<!--            <argument>${maven.multiModuleProjectDirectory}/ojdbc-provider-pkl/src/main</argument>-->
<!--            <argument>src/main/resources/OjdbcConfig.pkl</argument>-->
<!--          </arguments>-->
<!--        </configuration>-->
<!--      </plugin>-->
    </plugins>
  </build>

</project>