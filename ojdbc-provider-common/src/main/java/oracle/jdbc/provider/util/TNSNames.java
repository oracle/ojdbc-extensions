/*
 ** Copyright (c) 2023 Oracle and/or its affiliates.
 **
 ** The Universal Permissive License (UPL), Version 1.0
 **
 ** Subject to the condition set forth below, permission is hereby granted to any
 ** person obtaining a copy of this software, associated documentation and/or data
 ** (collectively the "Software"), free of charge and under any and all copyright
 ** rights in the Software, and any and all patent rights owned or freely
 ** licensable by each licensor hereunder covering either (i) the unmodified
 ** Software as contributed to or provided by such licensor, or (ii) the Larger
 ** Works (as defined below), to deal in both
 **
 ** (a) the Software, and
 ** (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
 ** one is included with the Software (each a "Larger Work" to which the Software
 ** is contributed by such licensors),
 **
 ** without restriction, including without limitation the rights to copy, create
 ** derivative works of, display, perform, and distribute the Software and make,
 ** use, sell, offer for sale, import, export, have made, and have sold the
 ** Software and the Larger Work(s), and to sublicense the foregoing rights on
 ** either these or other terms.
 **
 ** This license is subject to the following condition:
 ** The above copyright notice and either this complete permission notice or at
 ** a minimum a reference to the UPL must be included in all copies or
 ** substantial portions of the Software.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 ** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 ** SOFTWARE.
 */

package oracle.jdbc.provider.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Map;

import static java.lang.String.format;
import static java.nio.charset.StandardCharsets.UTF_8;

/**
 * Abstraction of a tnsnames.ora file generated by the ADB service. This
 * class parses the file and provides methods to retrieve connection strings
 * based on consumer groups or aliases. The file contains connection strings
 * for different consumer groups. The consumer groups are classified as high,
 * medium, low, transaction processing (tp), and transaction processing
 * urgent (tpurgent). Each connection string is an Oracle Net descriptor for
 * a database service, having a format of: (DESCRIPTION=...).
 * The Oracle JDBC driver understands how to parse information from this format,
 * and use the information to establish a network connection with an ADB
 * instance.
 * In addition to consumer groups, this class also supports retrieval of connection
 * strings based on aliases defined in the tnsnames.ora file. This allows users to
 * specify custom aliases for connection strings and retrieve them accordingly.
 */
public final class TNSNames {

  /**
   * Maximum size, in bytes, of a connection string.
   * <a href="https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/syntax-rules-configuration-files.html#GUID-C1E7C97B-FF0A-4174-BC09-6F1B09B0B6E1">
   * The 4KB limit is specified here.
   * </a>
   */
  private static final int MAX_CONNECTION_STRING_SIZE = 4_000;

  /** Connection strings for each consumer group */
  private final Map<ConsumerGroup, String> connectionStrings;

  /** Connection strings for each alias */
  private final Map<String, String> aliasConnectionStrings;

  /**
   * Constructs an instance that represents a tnsnames.ora file with the given
   * connection strings.
   *
   * @param connectionStrings Connection strings mapped to a consumer group. Not
   * null. Retained.
   * @param aliasConnectionStrings Connection strings mapped to aliases. Not
   * null. Retained.
   */
  private TNSNames(Map<ConsumerGroup, String> connectionStrings, Map<String,
          String> aliasConnectionStrings) {
    this.connectionStrings = connectionStrings;
    this.aliasConnectionStrings = aliasConnectionStrings;
  }

  /**
   * Returns a connection string for a given {@code consumerGroup}. This method
   * returns {@code null} if no entry is present for the {@code consumerGroup}.
   * The set of available consumer groups will depend on the type of ADB:
   * Data Warehouse, Transaction Processing, JSON, etc.
   *
   * @param consumerGroup Consumer group of the connection string. Not null.
   * @return The connection string for the {@code consumerGroup}, or null if
   * none is defined.
   */
  public String getConnectionString(ConsumerGroup consumerGroup) {
    return connectionStrings.get(consumerGroup);
  }

  /**
   * Returns a connection string for a given alias. This method returns
   * {@code null} if no entry is present for the alias.
   *
   * @param alias The alias of the connection string. Not null.
   * @return The connection string for the alias, or null if none is defined.
   */
  public String getConnectionStringByAlias(String alias) {
    return aliasConnectionStrings.get(alias);
  }

  /**
   * Creates a {@code TNSNames} object read from a tnsnames.ora stream. This
   * method parses the syntax defined here:
   * https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/syntax-rules-configuration-files.html#GUID-D7E40356-7476-49E1-B0A8-5664DCE47E2F
   * And here:
   * https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/local-naming-parameters-in-tns-ora-file.html#GUID-47DAB4DF-1D35-46E5-B227-339FF912E058
   */
  public static TNSNames read(InputStream inputStream) {

    BufferedReader reader =
        new BufferedReader(new InputStreamReader(inputStream, UTF_8));

    EnumMap<ConsumerGroup, String> connectionStrings =
        new EnumMap<>(ConsumerGroup.class);
    Map<String, String> aliasConnectionStrings = new HashMap<>();
      try {
        for (String line = reader.readLine(); line != null; line = reader.readLine()) {

        // Search for a line that starts a new parameter, which is assumed to be
        // an alias for a descriptor, like this:
        // alias = (DESCRIPTION...
        if (!isParameterStart(line))
          continue;

        // The service name is terminated by a space
        int serviceNameEnd = line.indexOf(' ');
        String serviceName = line.substring(0, serviceNameEnd);
        ConsumerGroup consumerGroup = ConsumerGroup.fromServiceName(serviceName);

        // The connection string may span multiple lines
        String descriptor = parseDescriptor(line, reader);

        connectionStrings.put(consumerGroup, descriptor);
        // Add to alias mapping
        aliasConnectionStrings.put(serviceName, descriptor);
      }
    }
    catch (IOException ioException) {
      throw new IllegalStateException(
          "Failed to read tnsnames.ora", ioException);
    }

    return new TNSNames(connectionStrings, aliasConnectionStrings);
  }

  /**
   * Returns {@code true} if a given {@code line} is the start of a new
   * parameter in a tnsnames.ora file.
   * <a href="https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/syntax-rules-configuration-files.html#GUID-C1E7C97B-FF0A-4174-BC09-6F1B09B0B6E1">
   * New parameters must begin with a line that is not blank, indented, or
   * commented
   * </a>.
   */
  private static boolean isParameterStart(String line) {

    if (line.isEmpty())
      return false;

    char firstChar = line.charAt(0);

    return firstChar != ' '
        &&  firstChar != '\t'
        && firstChar != '#';
  }

  /**
   * Returns a descriptor from a tnsnames.ora file, beginning from the
   * {@code firstLine} and continuing into the next lines from a {@code reader}.
   * The first line is expected to have the form:
   * <pre>
   *   alias = (DESCRIPTION=...
   * </pre>
   * @implNote When this method returns, the reader is positioned after the
   * line which followed after the description. If that line needs to be
   * retained, this method should be modified to call
   * {@link BufferedReader#mark(int)} and {@link BufferedReader#reset()}.
   */
  private static String parseDescriptor(
      String firstLine, BufferedReader reader) throws IOException {

    StringBuilder builder = new StringBuilder();

    // Capture everything after the = sign on the first line
    int descriptorStart = firstLine.indexOf('=') + 1;

    if (descriptorStart < firstLine.length())
      builder.append(firstLine.substring(descriptorStart));

    // Capture every line until a new parameter begins
    while(true) {
      // Place a mark in case the next line is the start of a new parameter
      reader.mark(MAX_CONNECTION_STRING_SIZE);

      String line = reader.readLine();

      if (line == null)
        break;

      if (isParameterStart(line)) {
        reader.reset();
        break;
      }

      int size = builder.length() + line.length();
      if (size > MAX_CONNECTION_STRING_SIZE) {
        throw new IllegalStateException(format(
          "Size of a connection string is at least %,d bytes," +
            " and exceeds the maximum size of %d bytes",
          size, MAX_CONNECTION_STRING_SIZE));
      }

      builder.append(line);
    }

    return builder.toString();
  }

  /**
   * Consumer groups used to classify the connection strings of a tnsnames.ora
   * file. These groups are pre-defined for each type of ADB workload type:
   * https://docs.oracle.com/en/cloud/paas/autonomous-database/adbsa/connect-predefined-generic.html#GUID-E49773B3-6C07-4F6F-906B-42705D237523
   */
  public enum ConsumerGroup {
    HIGH("high"),
    MEDIUM("medium"),
    LOW("low"),
    TRANSACTION_PROCESSING("tp"),
    TRANSACTION_PROCESSING_URGENT("tpurgent");

    /**
     * The postfix that appears after the last "_" character in a service name
     * for this consumer group.
     */
    private final String postFix;

    ConsumerGroup(String postFix) {
      this.postFix = postFix;
    }

    /**
     * Mapping of post fix text to a consumer group enum. For instance, "high"
     * maps to {@link #HIGH}
     */
    private static final Map<String, ConsumerGroup> POST_FIX_MAP;
    static {
      ConsumerGroup[] consumerGroups = ConsumerGroup.values();

      HashMap<String, ConsumerGroup> postFixMap =
          new HashMap<>(consumerGroups.length);

      for (ConsumerGroup consumerGroup : consumerGroups) {
        postFixMap.put(consumerGroup.postFix, consumerGroup);
      }

      POST_FIX_MAP = Collections.unmodifiableMap(postFixMap);
    }

    /**
     * Returns the consumer group identified by a given {@code serviceName}.
     * To identify a consumer group, this method examines the text following the
     * last underscore character in the service name. For instance, a service
     * name of "mydbname_high" has "high" after the last underscore, and
     * identifies the {@link #HIGH} consumer group.
     *
     * @param serviceName Service name entry of a tnsnames.ora file. Not null.
     * @return The consumer group identified by the {@code serviceName}. Not
     * null.
     * @throws IllegalStateException If the consumer group can not be identified
     * from the service name.
     */
    static ConsumerGroup fromServiceName(String serviceName) {
      int postFixStart = 1 + serviceName.lastIndexOf('_');

      if (postFixStart > serviceName.length() - 1)
        throw unrecognizedConsumerGroup(serviceName);

      String postFix = serviceName.substring(postFixStart);
      ConsumerGroup consumerGroup = POST_FIX_MAP.get(postFix);

      if (consumerGroup == null)
        throw unrecognizedConsumerGroup(serviceName);

      return consumerGroup;
    }

    private static IllegalStateException unrecognizedConsumerGroup(
        String serviceName) {
      return new IllegalStateException(
          "Consumer group is not recognized in service name: " + serviceName);
    }
  }
}
